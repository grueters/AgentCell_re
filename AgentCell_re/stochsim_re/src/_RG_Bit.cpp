/*************************************************************************
*
* FILENAME:	RG_Bit.cpp
*
* CLASS:	C_Random_Generator_Bit_String
*
* DESCRIPTION:	This class is derived from the abstract class
*		C_Random_Generator. This is an implementation of a Bit String
*		random number generator (described in Numerical Recipes P298).
*		A bit register is stored. Whenever a random number is required,
*		repeated calls are made to a method to generate a random bit.
*		The concatenation of these bits form the random number. The
*		random bits are generated by performing a simple logical
*       operation on the bit register and performing a bit shift to
*       the left.
*
* TYPE:		Core
*
*************************************************************************/

#include "_Stchstc.hh"

// The following parameters are defined for calculating random bits. Only
// specific combinations of these values will give rise to a good level of
// randomness. There are tables which give the best values for these
// parameters dependent on the length of the bit register being used.

#define RAN_GEN_NAME	"Bit String Random Number Generator"
#define IB1	        1
#define IB2	        2
#define IB3	        4
#define IB4	        16
#define IB5	        64
#define IB6	        0x80000000
#define MASK	        (IB1 + IB2 + IB3 + IB4 + IB5)


/*************************************************************************
*
* METHOD NAME:	Constructor
*
* DESCRIPTION:	The random number generator name is defined.
*
*************************************************************************/

C_Random_Generator_Bit_String::C_Random_Generator_Bit_String
(C_Application* p_App)
 : C_Random_Generator(p_App)
{
  m_lpszName = new char[strlen(RAN_GEN_NAME) + 1];
  strcpy(m_lpszName, RAN_GEN_NAME);
}
	

/*************************************************************************
*
* METHOD NAME:	Raw_Reseed
*
* DESCRIPTION:	The generator is reseeded by copying the newly calculated
*		seed (this is done in the ancestor) to the bit register.
*
*************************************************************************/

void
C_Random_Generator_Bit_String::Raw_Reseed(void)
{
  m_nReg = m_nSeed;
}

	
/*************************************************************************
*
* METHOD NAME:	Random_Bit
*
* DESCRIPTION:	This method returns a random bit by performing logical
*				operations on the bit register.
*
*************************************************************************/

int
C_Random_Generator_Bit_String::Random_Bit(void)
{
  // If most significant bit is set...
  if (m_nReg & IB6)
    {
      // EOR register with MASK, left shift and set least significant bit
      m_nReg = ((m_nReg ^ MASK) << 1) | IB1;
      return 1;
    }
  else  // Otherwise...
    {
      // Just shift register to left
      m_nReg <<= 1;
      return 0;
    }
}
	
	
/*************************************************************************
*
* METHOD NAME:	New_Num
*
* DESCRIPTION:	Generates a random number within a given range. A number
*		is constructed by making repeated calls to the random
*		bit generator and concatenating the resultant bit string.
*
* PARAMETERS:	long nRange - The range of the number to be generated.
*
* RETURNS:	long	    - A number between 0 and (nRange - 1).
*
*************************************************************************/

long
C_Random_Generator_Bit_String::New_Num (long nRange)
{
  long nBitString;
  long nRangeCounter;
  do
    {
      // Set variable to keep track of the range required
      nRangeCounter = nRange;
      nBitString = 0;
      // Repeatedly concatenate random bits to bit string
      // until the range counter has reached zero
      do
	{
	  // Shift bit string to the left ready for a new random bit
	  nBitString <<= 1;
	  // Add a new random bit
	  nBitString += Random_Bit();
	  // Right shift range counter
	  nRangeCounter >>= 1;
	}
      while (nRangeCounter > 0);
    }
  // Repeat process if random number exceeds range
  while (nBitString >= nRange);

// If validation is required, call validation method.
#ifdef __RAN_NUM_GEN_VALIDATION
  // This is implemented as conditional compilation for  performance reasons.
  Validate(nBitString, nRange);
#endif
  return nBitString;
}


/*************************************************************************
*
* METHOD NAME:	New_Num
*
* DESCRIPTION:	Generates a random number between 0 and 1. A number
*		is constructed by scaling an integer between 0 and 
*		RAN_NUM_RESOLUTION appropriately.
*
* RETURNS:	double		- A number between 0 and 1
*
*************************************************************************/

double
C_Random_Generator_Bit_String::New_Num (void)
{
  return (((double) New_Num(RAN_NUM_RESOLUTION)) / RAN_NUM_RESOLUTION);
}


/*************************************************************************
*
* METHOD NAME:	Repeat_Sequence
*
* DESCRIPTION:	Indicates whether or not sequence could be repeated (in
*		which case generator requires reseeding). The sequence
*		repeats if the register = 0 (because if this is the case
*		all subsequent numbers will be 0 !) or if the register
*		equals the original seed again.
*
* PARAMETERS:	long nNextNum	-	Not used.
*
* RETURNS:	Bool		-	TRUE	Sequence has repeated
*					FALSE	Sequence has not repeated
*
*************************************************************************/

Bool
C_Random_Generator_Bit_String::Repeat_Sequence(long)
{
  return (((short int) m_nReg == (short int) m_nSeed) || (m_nReg == 0));
}
